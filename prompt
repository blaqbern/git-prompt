if [[ $fpath[(ie)$0:a:h/zshfn] -gt ${#fpath} ]]; then
  fpath=( $0:a:h/zshfn ${fpath[@]} )
fi

autoload $0:a:h/zshfn/*(:t)

precmd () {
  build_prompt
}

build_prompt () {
  local right_prompt_components=$(build_right_prompt)
  local prompt_components=( $(blue %~) ⏾ '' )

  PROMPT=${prompt_components[@]}
  RPROMPT=${right_prompt_components[@]}
}

build_right_prompt () {
  local current_branch=$(get_current_branch_name)
  local components

  if [[ -d .git ]]; then
    local compare_origin_main=$(compare_origin_ref $(get_origin_main_branch_name))
    local compare_origin_current=$(compare_origin_ref $current_branch)

    components=(
      $(magenta $compare_origin_current)
      $(cyan $compare_origin_main)
      $(blue $current_branch)
      $(git_status_badges)
      $(git_stash_badge)
    )
  else
    components=( $(yellow ×) )
  fi

  echo $components
}

compare_origin_ref () {
  if [[ -a .git/refs/remotes/origin/$1 ]]; then
    local current_ref=$(cat .git/refs/heads/$(get_current_branch_name))
    local origin_ref=$(cat .git/refs/remotes/origin/$1)

    if [[ $current_ref != $origin_ref ]]; then
      local ahead=ᐃ
      local behind=ᐁ

      local merge_base=$(git merge-base $current_ref $origin_ref 2> /dev/null)

      if [[ $origin_ref == $merge_base ]]; then
        echo $ahead
      elif [[ $current_ref == $merge_base ]]; then
        echo $behind
      else
        echo $ahead$behind
      fi
    fi
  fi
}
